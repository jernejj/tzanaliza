
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 07 00:25:17 CET 2007
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 07 00:25:17 CET 2007
  */
public class AnalizaSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizaSyn() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizaSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizaSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\003\000\002\002\004" +
    "\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\010\004\005\006\004\010\006\001\002\000" +
    "\004\010\006\001\002\000\012\002\000\005\000\007\000" +
    "\011\000\001\002\000\010\004\005\006\004\010\006\001" +
    "\002\000\012\002\ufffd\005\ufffd\007\ufffd\011\ufffd\001\002" +
    "\000\010\002\012\005\011\007\013\001\002\000\010\004" +
    "\005\006\004\010\006\001\002\000\004\002\001\001\002" +
    "\000\010\004\005\006\004\010\006\001\002\000\012\002" +
    "\uffff\005\011\007\uffff\011\uffff\001\002\000\012\002\ufffe" +
    "\005\ufffe\007\ufffe\011\ufffe\001\002\000\010\005\011\007" +
    "\013\011\017\001\002\000\012\002\ufffb\005\ufffb\007\ufffb" +
    "\011\ufffb\001\002\000\012\002\ufffc\005\ufffc\007\ufffc\011" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\006\002\007\003\006\001\001\000\004\003" +
    "\017\001\001\000\002\001\001\000\006\002\015\003\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\014\003\006\001\001\000\002\001\001\000\006\002\013" +
    "\003\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizaSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizaSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizaSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token) {
		Report.error ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right, 1);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizaSyn$actions {
  private final AnalizaSyn parser;

  /** Constructor */
  CUP$AnalizaSyn$actions(AnalizaSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizaSyn$do_action(
    int                        CUP$AnalizaSyn$act_num,
    java_cup.runtime.lr_parser CUP$AnalizaSyn$parser,
    java.util.Stack            CUP$AnalizaSyn$stack,
    int                        CUP$AnalizaSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizaSyn$result;

      /* select the action based on the action number */
      switch (CUP$AnalizaSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_aux ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr_aux",1, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NOT expr_aux 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr_aux 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          return CUP$AnalizaSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-1)).value;
		RESULT = start_val;
              CUP$AnalizaSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.elementAt(CUP$AnalizaSyn$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizaSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizaSyn$parser.done_parsing();
          return CUP$AnalizaSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

