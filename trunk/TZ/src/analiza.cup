
parser code  {: 
  public Absyn.Exp parseResult;
  
  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }


  

:};

terminal String ID ;
terminal LPAREN, RPAREN, AND, OR, NEG, UMINUS;

non terminal program;
non terminal Absyn.Exp exp;
non terminal Absyn.Var lvalue;
non terminal Absyn.ExpList exps;


spaprecedence left OR;
precedence left AND;
precedence left NEG;

start with program;

program ::= exp:e
		   {:parser.parseResult = e;:} ;
		exp ::= lvalue:lv
				{: RESULT = new Absyn.VarExp(lv.pos, lv); :}
				/* operators */ 
				
		/*		| NEG LPAREN exps:e RPAREN
				{: RESULT = new Absyn.OpExp(eleft, new Absyn.IntExp(0,0), Absyn.OpExp.NEG, new Absyn.SeqExp(eleft,e)); :} 
				%prec UMINUS  */
				 
								
				| NEG LPAREN exp:r RPAREN
				{: RESULT = new Absyn.OpExp(rleft, new Absyn.IntExp(0,0), Absyn.OpExp.NEG, r); :}
				
			/*	| LPAREN:lp exps:el RPAREN
				{: RESULT = new Absyn.SeqExp(lpleft, el); :} */
				
				| LPAREN exp:e RPAREN
				{: RESULT = e ; :}
				
				| exp:l AND exp:r
				{: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.AND, r); :}
				
				| exp:l OR exp:r
				{: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.OR, r); :} 
				;
			
		lvalue ::= ID:i
				{: RESULT = new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i) ); :}
				;

/*		exps ::= exp:e
				{: RESULT = new Absyn.ExpList(e , null); :} 
				 ;  */
		
